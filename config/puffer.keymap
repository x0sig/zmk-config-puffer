/*
 * https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/keys.h
 */

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define NAV 2
#define SYS 3

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  /* left hand  */
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  /* right hand */
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      /* thumbs     */

// ---------- SETTINGS ----------

&sk {  // sticky-key config
    release-after-ms = <1000>; // release after 1s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// ----------- COMBOS -----------
#define COMBO_TERM_FAST 25
#define COMBO_TERM_SLOW 50

// ----------- KEYMAP -----------

// reuse basic mod-morph scheme
#define MAKE_SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: space | shift + tap: tab | hold: Num layer
//MAKE_SIMPLE_MORPH(spc_tab_num, SFT, &lt NUM SPACE, &kp TAB)

// tap: semicolon | shift + tap: colon
MAKE_SIMPLE_MORPH(semi_colon, SFT, &kp SEMI, &kp COLON)

// tap: slash | shift + tap: question mark
MAKE_SIMPLE_MORPH(slash_qmark, SFT, &kp SLASH, &kp QMARK)

// tap: comma | shift + tap: double quotes
MAKE_SIMPLE_MORPH(comma_lt, SFT, &kp COMMA, &kp LT)

// tap: dot | shift + tap: single quotes
MAKE_SIMPLE_MORPH(dot_gt, SFT, &kp DOT, &kp GT)

// tap: plus | shift + tap: equal
MAKE_SIMPLE_MORPH(plus_equal, SFT, &kp PLUS, &kp EQUAL)

// tap: ESC | shift + tap: tilde
MAKE_SIMPLE_MORPH(esc_tilde, SFT, &kp ESC, &kp TILDE)

// tap: DEL | ctrl + tap: caps word
//MAKE_SIMPLE_MORPH(del_caps, CTL, &kp DEL, &caps_word)

// For mod tap
#define MAKE_MOD_TAP(NAME, BINDING1, BINDING2) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "hold-preferred"; \
        tapping-term-ms = <200>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

//MAKE_MOD_TAP(mod_esctil, &kp , &esc_tilde)
//MAKE_MOD_TAP(mod_delcaps, &kp, &del_caps)

// double-tap to enter bootloader
ZMK_TAP_DANCE(boot,
    bindings = <&none>, <&bootloader>;
)

// Cross-hand only home row mods
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_sc, &kp, &semi_colon, KEYS_L THUMBS)  

ZMK_CONDITIONAL_LAYER(sys_condition, NUM NAV, SYS)


ZMK_LAYER(Qwerty,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp Q           &kp W         &kp E          &kp R        &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &hml LALT A   &hml LGUI S  &hml LCTRL D   &hml LSHFT F     &kp G             &kp H     &hmr RSHFT J  &hmr RCTRL K   &hmr RGUI L   &hmr_sc RALT 0
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z        &kp X         &kp C         &kp V         &kp B             &kp N         &kp M       &comma_lt      &dot_gt      &slash_qmark
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    &kp TAB     &kp SPACE    &lt NUM ESC      &lt NAV BSPC   &kp ENTER      &kp DEL
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(Numpad,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp GRAVE      &kp TILDE     &kp AT       &kp CARET     &kp PLUS          &kp STAR       &kp N7        &kp N8        &kp N9       &kp MINUS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
  &hml LALT DLLR &hml LGUI AMPS &hml LCTRL EQUAL &hml LSHFT STAR &kp PIPE       &kp PLUS       &kp N4        &kp N5        &kp N6       &kp SLASH
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp PRCNT    &kp EXCL  &kp SINGLE_QUOTE &kp DOUBLE_QUOTES &kp HASH      &kp EQUAL      &kp N1        &kp N2        &kp N3     &kp BACKSLASH
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___          ___         ___               ___         &kp N0          ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(Nav,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
       XXX          XXX             XXX            XXX          XXX            &kp C_VOL_UP    &kp C_VOL_DN   &kp K_MUTE       &kp END      &kp PG_UP
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &hml LALT LBKT &hml LGUI RBKT &hml LCTRL LPAR &hml LSHFT RPAR   XXX        &kp LEFT    &kp DOWN     &kp UP     &kp RIGHT    &kp PG_DN
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       XXX          XXX          &kp LBRC        &kp RBRC          XXX            XXX      &kp C_PP      &kp C_PREV    &kp C_NEXT      XXX          
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___          ___               ___           ___           ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(System,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &boot          XXX          XXX            XXX           XXX          &kp C_BRI_INC    &kp F7         &kp F8       &kp F9        &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4     &kp C_BRI_DEC    &kp F4         &kp F5       &kp F6        &kp F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &bt BT_CLR        XXX          XXX            XXX           XXX               XXX         &kp F1         &kp F2       &kp F3      &kp F10
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___               ___           ___           ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

// vim: filetype=c
